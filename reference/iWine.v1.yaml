openapi: 3.0.0
info:
  title: iWine
  version: '1.0'
  contact:
    name: Dmitry
    email: dima@melodrom.ru
  description: "iWine HTTP API. Get current wine volume (in litres), alcohol contents (% by volume), sugar (% by mass), temperature, wine type (as a JSON list of strings and certainty values: `{\"red\":90, \"white\":1,  \"rose\":9, \"orange\":0}`). Aerate contents or cool/warm to a desired temperature. Set callback url to receive notifications to your device within LAN.\n\n## Security\n\nSince iWine must work on a LAN with no guarantee of access to Internet and CA infrastructure, it relies on a custom variant of HOBA security scheme for mutual authorisation and authentication of controllers and iWine devices.\n\nTo authorize a controller with iWine device press **PAIR** button on iWine control panel, \"PAIRING MODE\" should appear on its LED display. When in pairing mode, iWine will accept valid authorization request from a controller and display its network name (if available) or IP address on the LED display with a scrolling message: \"LONG PRESS **PAIR** TO CONFIRM, SHORT PRESS TO CANCEL\". User can confirm or cancel authorization accordingly.\n\nTo initiate a pairing request controller must  generate a secp256k1 128-bit keypair and send a POST HTTP request to iWine `/pair` endpoint with its public key in its body. If this request was accepted by iWine and confirmed by its user in a timely manner, iWine will generate a keypair and return the public key in the POST responce body with HTTP code 201. It will accept only the first valid pairing request and ignore all subsequent requests to the `/pair` endpoint until this pairing session ends and another one starts. If there were no valid pairing requests, the pairing mode will time out in 1 minute. User can abort pairing mode session by short-pressing **PAIR** again any time.\n\nThe proposed security scheme provides no protection from MITM and replay attacks, as we consider their mitigation outside of the scope of this task.\n\n## Requesting iWine status information\n\nTo request iWine status information controller must send a GET request to the `/status` endpoint. To authenticate itself it passes its public key and its public key, signed by a private key as `key` and `sig` strings, base64-encoded, as parameters of the GET request.\niWine will lookup the provided public key in its internal database of known controllers (that is stored in NVRAM) and, if found, checks the signature:\n\n  `if (secp256k1.ecdsaVerify(signature: Uint8Array.from(sig), message: Uint8Array.from(key), publicKey: Uint8Array.from(key))) {\n  // OK\n  }\n  else {\n  // ERROR\n  }`\n  \nIf verification succeeds, iWine constructs a request payload, JSON object of the following format:\n{\n  \"temp\":\"_contents_temperature_Celsius_\",\n  \"alc\":\"_alcohol_contents_by_volume_cl_per_l_\",\n  \"vol\":\"_volume_of_contents_l_\"\n  \"type\": {\n    \"red\":\n    \"white\":\n    \"rose\":\n    \"orange\":\n  }\n}\n\n  "
  license:
    name: GPL
servers:
  - url: localhost
    description: ''
paths:
  /status:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                description: Status responce encrypted payload in base64
                minLength: 180
                maxLength: 188
                pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'
              examples: {}
        '401':
          description: Unauthorized
      operationId: get-status
      description: Returns JSON with device status information
      requestBody:
        content:
          application/json:
            schema:
              $ref: ''
      parameters:
        - schema:
            type: string
            maxLength: 22
            minLength: 22
            pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'
          in: query
          name: key
          description: Controller public key base64
          required: true
        - schema:
            type: string
          in: query
          name: sig
          description: Controller public key signed with private key
          required: true
  /command:
    post:
      summary: ''
      operationId: post-command
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
          headers: {}
        '422':
          description: Unprocessable Entity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Operations request encrypted payload + signature
              properties:
                payload:
                  type: string
                  maxLength: 1024
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'
                  description: Operations request encrypted payload
                sig:
                  type: string
                  minLength: 44
                  maxLength: 44
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'
                  description: Operations request encrypted payload signed with Controller private key
        description: ''
  /pair:
    post:
      summary: ''
      operationId: post-pair
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: string
                description: iWine device name and ed25519 public key
                minLength: 22
                maxLength: 22
                pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'
          headers: {}
        '400':
          description: |-
            Bad Request
            Switch iWine to pairing mode first
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: Requesting device name and ed25519 public key
              minLength: 22
              maxLength: 22
              pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'
    parameters: []
components:
  schemas: {}
  securitySchemes:
    Public key exchange:
      type: http
      scheme: hoba
      description: "When in pairing mode iWine will accept Controller \nPOST request to `/pair` endpoint with Controller public key and return 200 OK with iWine public key in responce body"
