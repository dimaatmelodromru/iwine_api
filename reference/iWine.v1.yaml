openapi: 3.0.0
info:
  title: iWine HTTP API Overview
  version: '1.0'
  contact:
    name: Dmitry
    email: dima@melodrom.ru
  description: 'iWine HTTP API. Authorize your network device to allow querying of iWine status information and controlling its operations (become a Controller). Mutually authenticate controller and iWine at every transaction. Get current wine volume (in litres), alcohol contents (% by volume), sugar (% by mass), temperature, wine type (as a JSON list of strings and certainty values: `{"red":90, "white":1,  "rose":9, "orange":0}`). Aerate contents or cool/warm to the desired temperature. Set callback URL to receive notifications to your device within LAN.'
  license:
    name: GPL
servers:
  - url: localhost
    description: ''
paths:
  /status:
    get:
      summary: status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                description: Status responce encrypted payload in base64
                example: MIIBITANBgkqhkiG9w0BAQEFAAOCAQ4AMIIBCQKCAQB1gGTkY6Ne51sw6YkKu3Cy 7AvYYwymm+ofULTfNZF+rW29Xm1516jzHlsE0owXGaqOxuhOa0jwJTL7ckzsX0tz pOcHl8WIh0Ko8yHHCQMjrh7FdFMsh4aVRirnCJUcm+EU11qC0Okq/iYy11G9rZum 0ztRBZc6L2MRMbM/B1USi3Lj7ofiGupIqFov+XzCJOaxMhLdpGgrmcNrOTJKqINO y0xSPf/y6pvBxDljvLx6cOMW5HAjmNBDqX5oswd6+aJzU1iJwQAQBCA3and6W/dE pYT5IT3IogLEH7fcnOOitOAIIYDPPLp6+lkXK78dAar5Rr4rGZaPB95Ix5mbVnQ1 AgMBAAE=
                minLength: 398
                maxLength: 398
                pattern: '(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?){1}'
              examples: {}
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
      operationId: get-status
      description: "To request iWine status information controller must send a GET request to the `/status` endpoint. To authenticate itself, it passes its public key and its public key signed by the controller's private key as `key` and `sig` strings, base64-encoded, as parameters of the GET request.\n\niWine will lookup the provided public key in its internal database of known controllers (that is stored in NVRAM) and, if found, checks the signature.\n  \nIf verification succeeds, iWine constructs a status response payload, a JSON object of the following format:\n\n```\n{\n  \"temp\": _contents_temperature_Celsius_,\n  \"alc\": _alcohol_contents_by_volume_cl_per_l_,\n  \"vol\": _volume_of_contents_l_,\n  \"type\": {\n    \"red\": _certainty_level_,\n    \"white\": _certainty_level_,\n    \"rose\":  _certainty_level_,\n    \"orange\":  _certainty_level_\n  }\n  \"operations\": {\n    \"aeration\": _aeration_status_,\n    \"settemp\": _settemp_status_\n    }\n}\n```\nwhere\n\n**_contents_temperature_Celsius_** _(integer number)_: the temperature of the wine in Celsius degrees, 0-100;\n\n**_alcohol_contents_by_volume_cl_per_l_** _(integer number)_: alcohol contents in centilitre per litre, 0-100;\n\n**_volume_of_contents_l_** _(float number)_: current volume of iWine contents 0-10;\n\n**_certainty_level_** _(integer number)_: a certainty level that the contents of iWine correspond to a given type of wine according to iWine machine-learning algorithm, 0-100;\n\n**_aeration_status_** _(integer number)_: reports the progress of aeration operation, 1 for an operation has just started, 100 for an operation that has completed, 0 for idle (an operation was not requested), -1 for a failed operation, -1-100;\n\n**_settemp_status_** _(array of 2 integer numbers)_: the first value of the array reports the progress of a cooling/warming operation, 1 for an operation that has just started, 100 for an operation that has just completed, 0 for idle (an operation was not requested), -1 for a failed operation; the second value designates the target temperature of the ongoing (or failed) operation (would be 0 for idle).\n\nThe 100% progress value of _settemp_status would time out after 1 minute and return to 0 (idle).\n\n#### Status Response Payload Example\n\n```\n{\n  \"temp\": 10,\n  \"alc\": 15,\n  \"vol\": 3.5,\n  \"type\": {\n    \"red\": 99,\n    \"white\": 0,\n    \"rose\":  1,\n    \"orange\":  0\n  }\n  \"operations\": {\n    \"aeration\": 50,\n    \"settemp\": [1,15]\n  }\n}\n```\n\nThis example payload means that the contents of iWine are most likely a red wine (but also could be rose, though highly unlikely) of 10 degrees Celsius with alcohol contents of 15% and volume of 3.5 liters. There are two ongoing operations: aeration is 50% complete while heating has just started with the target temperature of 15 degrees Celsius. \n\nIf verification fails, the `/status` endpoint would respond with `401 Unauthorized` error or `400 Bad Request` if the GET request was malformed.\n\n"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                '':
                  $ref: ''
      parameters:
        - schema:
            type: string
            maxLength: 398
            minLength: 398
            pattern: '(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?){1}'
          in: query
          name: key
          description: 'Controller public key, base64. Used for identification. iWine looks up this key in a table of known controllers. If this key cannot be found, this endpoint would return `403 Forbidden`'
          required: true
        - schema:
            type: string
            minLength: 398
            pattern: '(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?){1}'
            maxLength: 398
          in: query
          name: sig
          description: 'Controller public key signed with private key, base64. Used to authenticate the controller.  `401 Unauthorized`. No _WWW-Authenticate_ header would be provided.'
          required: true
      security: []
      tags:
        - Getting Status Information
  /command:
    post:
      summary: command
      operationId: post-command
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
          headers: {}
        '422':
          description: Unprocessable Entity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: 'encrypted command payload, controller public key and signature'
              properties:
                payload:
                  type: string
                  maxLength: 1024
                  pattern: '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$'
                  description: Command payload encrypted with iWine public key
                key:
                  type: string
                  description: Controller public key
                  example: MIIBITANBgkqhkiG9w0BAQEFAAOCAQ4AMIIBCQKCAQBzPtyuqNOoT/C/hYqkV1VO iwXie0gIydBU+naDbyf7+us4D2U9X8HxPa055ttOTXhRkF71N7rVTMgmEDYm/gGE CPoh63GV3XWOTcfREU2ngA1beCs7i3NPqRxkTlHuAPzmpPNESoZ+ci3p05LZiX6M EJB6jzb0/ityaqmwKHW8wHfQOoscSR9eBddy4EnhBoVp6P+y3A44z6emStF7W57c tDnN+CzmQNP+lXJ476GPOkhgqsxs8qU8BbaXvkrLP993ebgZ9N9MsRonRuEMCn5L lHgRzqhYiSLYWV2WnQytnsoCQwi8zfZJ00Yc8YLlBteaIYDgzGUJUAW5Zky8b1a1 AgMBAAE=
                  minLength: 398
                  maxLength: 398
                  pattern: '(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?){1}'
                sig:
                  type: string
                  description: Controller public key signed with private key
                  example: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnxUFXo+B1NYjEXckeU4t 2tEpy0SxNnIg8IDKLZNoV00/pzXK5uYIU9gghVHLarwazJ4th+ZpP8JAPg+BPgf3 pndjeRhKU2QfQedQQL1FS14Lkx8zIUvqPm7XkqYxCOd4jXUdO61sSXG/prOdV8m0 CSi51pnqemfAdNTLdMpd1NkfihrwgRusLEzxMCUiza3dSNDpOEV1JkR545WbNEdF 0sd7ucDSBXR8hDxuhNxN8Xi2+9sUMRr8cwYiypQ/OuppTYZvFA/jlOiOodgcYETe TD/oW5DTE9cwPxM/iTLnlbFyHfvwnKc7ID6eyHTPfAaXBysvE3HcLgATZrXm/vTh sQIDAQAB
                  minLength: 398
                  maxLength: 398
                  pattern: '(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?){1}'
              required:
                - payload
                - key
                - sig
        description: ''
      description: "To aerate the contents of iWine device or cool/warm the contents to a specified temperature, an authorized controller must send a POST request to `/command` endpoint. To authenticate the request, the requesting controller must include its public key as a base64-encoded string `key` and its public key signed with its private key as a base64-encoded string `sig` along with a _**command payload**_ in the body of the request.\n\nAll the parameters in the command request body are mandatory.\n\niWine would lookup the provided public key in its internal database of known controllers and, if found, check the signature.\n  \nIf the verification succeeds, iWine proceeds to decrypting and parsing the `payload`.\nIf the check fails, iWine would respond with HTTP error `401 Unauthorized`.\nIf decryption or parsing of the `payload` fails, iWine would respond with HTTP error `422 Unprocessable Entity`.\nIf any of the parameters are missing, not base64-strings or do not meet the length requirements, iWine would respond with `400 Bad Request`\n\nA _**command payload**_ is a JSON object constructed of one or both of the following items:\n\n`\"settemp\":\"_temperature_Celsius_\"`,\n\n`\"aerate\":\"on\"`\n\nand optional\n\n`\"callback\":\"_callback_URL_\"`\n\nto cool/warm and/or start aeration of the contents.\nThe cooling/warming process takes about 10 to 15 minutes and completes automatically.\nWhen each of the requested processes completes, iWine makes a POST HTTP request to _callback_URL_, if provided in the payload. The body of the callback POST request contains a _**callback_payload**_, base64-encoded JSON object with one of the following items:\n\n`\"aerate\": \"ok\"` or`\"aerate\": \"failed\"` to report of successful completion or failure of the aeration operation;\n\n`\"settemp\": _temperature_Celsius_` or `settemp: -1`, depending on the success of the requested operations (-1 for a failed heating/cooling operation);\n\nIn case of failure of either of the operations, a human-readable error message is included in the payload as well:\n\n`\"error\": \"Human-readable message in English\"`\n\nBoth _**command_payload**_ and _**callback_payload**_ must be encrypted with the private key of the request recipient (iWine private key for the former and controller private key for the latter) to maintain the security of communication.\n\nAll the parameters in a command payload are optional, but a valid command payload must have at least one of the two operation parameters: \"aerate\" or \"settemp\".\n\nThe order of parameters is irrelevant.\n\n#### _**command_payload**_ Example\n\n```\n{\n  \"settemp\":15,\n  \"aerate\":\"on\",\n  \"callback\":\"192.168.0.105/iwine\"\n}\n```\n\nThis payload instructs iWine to cool or warm the contents to 15 degrees Celsius, aerate the wine and call the provided endpoint after the completion of each operation, providing the information about its success or failure.\n  \n#### _**callback_payload**_ Examples\n\n```\n{\n  \"aerate\": \"failed\"\n  \"error\": \"Compressor failure\"\n}\n```\n\n```\n{\n  \"settemp\": 15\n}\n```"
      tags:
        - 'Operations and Notifications Management '
  /pair:
    post:
      summary: pair
      operationId: post-pair
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                description: iWine public key JSON
                additionalProperties: false
                properties:
                  pub:
                    type: string
                    example: MIIBITANBgkqhkiG9w0BAQEFAAOCAQ4AMIIBCQKCAQBqS/9IqZaT7d9IRaAekSYD fFTujFykWi7WlyYrTXhMCxwA+KqIJzHNKzY9Mdjl9O2jDUMLgwB224emDwNo7tgG 7mHq5KyKfFmp3UJQbMrKmMbPUJKd4Li236bH60vcDJ7Nn5dDZTDA07hpgbwKM9If 3QaD12TK1QuUTzmphVrzeLouBfQfRqhI/ZZv1OWKL0ZGeRdR4UrzPmdyxnZAxkED 1r4ZtRDRg5VKKI0se+eHPy7BV9itqV1HV6QCwP/gjKxQu2yxw+5kNOYIUui4KY/n KoJRpyJLm4Ebyo6ovY5Uvm7kDm2TDTIZNpaSafYI56eWC7ll5hhj3zpLizeGYY9B AgMBAAE=
                    minLength: 398
                    maxLength: 398
                    pattern: '(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?){1}'
                    description: 'iWine public key, base64'
                required:
                  - pub
            application/xml:
              schema:
                type: object
                properties: {}
            multipart/form-data:
              schema:
                type: string
            text/html:
              schema:
                type: string
          headers: {}
        '400':
          description: |-
            Bad Request
            Switch iWine to pairing mode first
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Controller public key JSON
              additionalProperties: false
              properties:
                pub:
                  type: string
                  example: MIIBITANBgkqhkiG9w0BAQEFAAOCAQ4AMIIBCQKCAQB1gGTkY6Ne51sw6YkKu3Cy 7AvYYwymm+ofULTfNZF+rW29Xm1516jzHlsE0owXGaqOxuhOa0jwJTL7ckzsX0tz pOcHl8WIh0Ko8yHHCQMjrh7FdFMsh4aVRirnCJUcm+EU11qC0Okq/iYy11G9rZum 0ztRBZc6L2MRMbM/B1USi3Lj7ofiGupIqFov+XzCJOaxMhLdpGgrmcNrOTJKqINO y0xSPf/y6pvBxDljvLx6cOMW5HAjmNBDqX5oswd6+aJzU1iJwQAQBCA3and6W/dE pYT5IT3IogLEH7fcnOOitOAIIYDPPLp6+lkXK78dAar5Rr4rGZaPB95Ix5mbVnQ1 AgMBAAE=
                  minLength: 398
                  maxLength: 398
                  pattern: '(([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?){1}'
                  description: 'Controller public key, base64'
              required:
                - pub
      security: []
      description: |-
        Since iWine must work on a LAN over HTTP with no guarantee of access to the Internet and CA infrastructure, it relies on a custom RSA key exchange for mutual authorization and authentication of controllers and iWine devices.

        To authorize a controller with iWine device press **PAIR** button on iWine control panel, "PAIRING MODE" should appear on its LED display. When in pairing mode, iWine accepts valid authorization request from a controller and display its network name (if available) or IP address on the LED display with a scrolling message: "LONG PRESS **PAIR** TO CONFIRM, SHORT PRESS TO CANCEL". Users can confirm or cancel authorization accordingly.

        To initiate a pairing request controller must generate a 2048-bit RSA key pair and send a POST HTTP request to iWine `/pair` endpoint with its public key in its body. If this request was accepted by iWine and confirmed by its user in a timely manner, iWine generates a keypair and return its public key and signature in the POST response body with HTTP code 201. It accepts only the first valid pairing request and ignores all subsequent requests to the `/pair` endpoint until this pairing session ends and another one starts. If there were no valid pairing requests, the pairing mode would time out in 1 minute. Users can abort pairing mode sessions by short-pressing **PAIR** again at any time.

        The proposed security scheme does not protect from MITM and replay attacks, as we consider their mitigation outside of the scope of this task. Replay attacks, in particular, could be addressed by introducing nonces into payloads.
      tags:
        - Authorization and Authentication
    parameters: []
components:
  schemas: {}
  securitySchemes: {}
